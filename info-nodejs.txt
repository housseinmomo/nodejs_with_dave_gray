NodeJS n'est pas un framework ou librarie
Il s'agit d'un environnement d'execution JS 
Contrairement au Vanilla JS (pure) qui s'execute sur le browser (frontend), NodeJS s'execute sur un seveur. 
Il a ete construit sur : Chrome V8 Javascript engine 
Par consequent, NodeJS peut etre considerer comme une solution (backend) 
Ici nous aurons "glabal object" au lieu "window object" comme objet parent ou global  
Dans NodeJS l'API fetch n'est pas present 
Avec NodeJS, la console se trouve au niveau du terminal

Contrairement aux packages de base de NodeJS, les packages npm sont des packages (node modules) creer par des personnes tier (developpeurs)
Lors d'un push ou d'un pull depuis un depot github, nous devons omettre le dossier node_module (qui contient l'ensemble de npm package) 
puis nous pouvons l'installer nous meme via le fichier package.json
Pour ce faire nous devons creer un fichier .gitignore pour ignorer le dossier node_module
Lors de l'instalation d'un package, on peux soit le configurer comme une dependance de production (on met rien apres le package) ou developpement (-D --save-dev)

Quelques packages utiles : 
    - nodemon : permet de redemarrer un serveur apres chaque modification d'un fichier : npm install nodemon -g 
    - initialiser npm pour un projet : npm init <-y: pour eviter les questions>
    - npm install date-fns 
    - npm install : cette commande nous permet de telecharger l'ensemble des dependances se trouvant sur le fichier package.json  
    - npm update : va faire des mises a jour en se basant toujours sur le fichier package.json 
    - npm <rm, un, uninstall> package <-D: si c'est une depandance de developpement>
    - npm install uuid@version : ce package nous permet de generer des id aleatoire 

Au niveau de l'objet script dans package.json, on peux specifier des commandes qu'on va libeller avec des mots clef (raccourcie)
    - npm start 
    - npm run dev 

ExpressJS est un framework baser sur NodeJS

Middleware: c'est n'importe quoi qui se trouve entre la requete et la reponse 
Il existe 3 types de Middlewares :
    - Middlewares et pre-concue 
    - Custom Middleware
    - Middleware creer par des parties tiers 
    
Modele MVC dans ExpressJS:
- ici le controller va nous permettre de stocker les fonction de traitement. 
- et c'est les routes qui vont faire appelle a ces fonctions, on specifiant le path associer a cette fonction ainsi que la methode HTTP 

JWT (JSON Web Tokens) va nous permettre de securiser nos routes 
C'est une forme d'Authentification apres que le user se soit connecter 
Une fois que le user se connecte, il pourra :
    - acceder a un token : expire apres peu de temps (entre 5 a 15 minutes)
    - raffraichier le token : prends du temps pour expirer (des heures, des jours) 

Accees au token :
    - on envoie sous le format JSON 
    - le client le stocke en memoire 
    - on ne le stocke pas dans un stockage local ou dans des cookies 

    - publier apres authorisation 
    - le client va utiliser ce token pour utiliser pour acceder a l'API tant qu'il est toujours valide (non expirer)
    - API va verifier le token d'accees avec les Middlewares
    - un nouveau token sera publier apres chaque rafraichissement de la requete 

Rafrichissement du token: 
    - on envoie sous le format httpOnly cookie 
    - Ce n'est pas accessible depuis le Javascript
    - doit imperativement expirer a un moment (avoir un delais)

    - publier apres l'autorisation
    - le client l'utilise pour faire des requetes sur des nouveau access (endpoint)
    - on peux le verifier avec les endpoint & database 
    - doit imperativement expirer a un moment / deconnexion 

Une fois que nous aurons configurer notre token et creer un middleware (qui a pour objectif de verifier si le user est connecter/authentifier) qui va s'executer a chaque requete 
On va utiliser le middleware sur les routes que l'on souhaite proteger 

